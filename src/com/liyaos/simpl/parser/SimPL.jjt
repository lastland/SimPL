options {
    STATIC = false;
    VISITOR = true;
    MULTI = true;
    NODE_DEFAULT_VOID = true;
    KEEP_LINE_COLUMN = true;
}

PARSER_BEGIN (SimPL)
    package com.liyaos.simpl.parser;
    import java.io.FileInputStream;
    import java.io.File;
    import java.io.FileNotFoundException;
    class SimPL {
	public static void main(String[] args)
	throws ParseException, TokenMgrError, FileNotFoundException {
	    SimPL parser = new SimPL(new FileInputStream(new File("test_input.txt")));
	    parser.Start();
	    System.out.println("Success!");
	}
    }
PARSER_END (SimPL)

SKIP: {" "}
SKIP: {"\n" | "\r" | "\r\n"}
// key words
TOKEN: {
    <LET: "let">
    | <IN: "in">
    | <END: "end">
    | <IF: "if">
    | <THEN: "then">
    | <ELSE: "else">
    | <WHILE: "while">
    | <DO: "do">
    | <FST: "fst">
    | <SND: "snd">
    | <HEAD: "head">
    | <TAIL: "tail">
    | <FUN: "fun">
    | <NIL: "nil">
}
// program operators
TOKEN: {
    <CONS: "::">
    | <OPAR: "(">
    | <CPAR: ")">
    | <COMMA: "," >
    | <ASSIGN: ":=">
    | <SEMICOLON: ";">
    | <DEFUN: "->">
}
// data type
TOKEN: {
    <INT: (["0"-"9"])+>
    | <BOOL: "true" | "false">
}
// bop
TOKEN: {
    <PLUS: "+">
    | <MINUS: "-">
    | <TIMES: "*">
    | <DIVIDE: "/">
    | <EQ: "=">
    | <GREATERTHAN: ">">
    | <LESSTHAN: "<">
    | <AND: "and">
    | <OR: "or">
}
// uop
TOKEN: {
    <UMINUS: "~">
    | <NOT: "not">
}
// identifier
TOKEN: {
    <IDENTIFIER: ["a"-"z"](["a"-"z", "0"-"9"])*>
}

ASTStart Start() #Start :
{}
{
    Expression()
    <EOF>
    {
	return jjtThis;
    }
}

void Expression():
{}
{
    LetExpression()
    | IfExpression()
    | WhileExpression()
    | Sequence()
}

void LetExpression() #Let :
{}
{
    <LET>
    Identifier()
    <EQ>
    Expression()
    <IN>
    Expression()
    <END> 
}

void IfExpression() #If :
{}
{
    <IF>
    Expression()
    <THEN>
    Expression()
    <ELSE>
    Expression()
    <END>
}

void WhileExpression() #While :
{}
{
    <WHILE>
    Expression()
    <DO>
    Expression()
    <END> 
}

void Sequence():
{}
{
    OneExpression()
    (<SEMICOLON>OneExpression())* #Sequence(>1)
}

void OneExpression() :
{}
{
    AnonymousFunction()
    | LOOKAHEAD(2) AssignmentExpression()
    | ConsExpression()
}

void AnonymousFunction() #AnonymousFunction:
{}
{
    <FUN> Identifier() <DEFUN>
    OneExpression()
}

void AssignmentExpression() #Assignment :
{}
{
    Identifier() <ASSIGN>OneExpression()
}

void ConsExpression():
{}
{
    (AndOrExpression() (<CONS> AndOrExpression())?) #Cons(>1)
}

void AndOrExpression():
{}
{  
    (CompareExpression() 
    (<AND> CompareExpression()
    | <OR> CompareExpression())*) #AndOr(>1)
}

void CompareExpression():
{}
{
    (AdditiveExpression()
    ((<EQ> | <GREATERTHAN> | <LESSTHAN>) AdditiveExpression())*) #Compare(>1)
}

void AdditiveExpression():
{}
{
    (Term() ((<PLUS>
    | <MINUS>) Term())*) #PlusMinus(>1)
}

void Term():
{}
{
    (Factor() ((<TIMES>
    | <DIVIDE>) Factor())*) #TimesDivide(>1)
}

void Factor():
{}
{
    NegativeExpression()
    | NotExpression()
    | AtomExpression()
}

void NegativeExpression() #Negetive :
{}
{
    <UMINUS> AtomExpression()
}

void NotExpression() #Not :
{}
{
    <NOT> AtomExpression()
}

void AtomExpression():
{}
{
    Integer()
    | Bool()
    | Identifier()
    | FstExpression()
    | SndExpression()
    | HeadExpression()
    | TailExpression()
    // Can these `LOOKAHEAD` be eliminated?
    | LOOKAHEAD(BracketExpression()) BracketExpression()
    | LOOKAHEAD(PairExpression()) PairExpression()
    | AppExpression()
}

void Bool() #Bool :
{
    Token t;
}
{
    t = <BOOL>
    {
	jjtThis.setValue(t.image);
    }
}

void Integer() #Int :
{
    Token t;
}
{
    t = <INT>
    {
	jjtThis.setValue(t.image);
    }
}

void Identifier() #Identifier :
{
    Token t;
}
{
    t = <IDENTIFIER>
    {
	jjtThis.setValue(t.image);
    }
}

void FstExpression() #Fst :
{}
{
    <FST> AtomExpression()
}

void SndExpression() #Snd:
{}
{
    <SND> AtomExpression()
}

void HeadExpression() #Head:
{}
{
    <HEAD> AtomExpression()
}

void TailExpression() #Tail:
{}
{
    <TAIL> AtomExpression()
}

void AppExpression() #Application :
{}
{
    <OPAR> Expression() Expression() <CPAR>
}

void PairExpression() #Pair :
{}
{
    <OPAR> Expression() <COMMA> Expression() <CPAR>
}

void BracketExpression() #Bracket :
{}
{
    <OPAR> Expression() <CPAR>
}
